#%RAML 1.0
title: Swagger Petstore
version: 1.0.0
baseUri: https://petstore.swagger.io/v2
baseUriParameters: {}
protocols:
- HTTPS
- HTTP
documentation:
- title: Swagger Petstore
  content: 'This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.'
securitySchemes:
  auth:
    type: OAuth 2.0
    settings:
      authorizationUri: http://petstore.swagger.io/oauth/dialog
      accessTokenUri: ''
      authorizationGrants:
      - implicit
      scopes:
      - write:pets
      - read:pets
types:
  Order:
    displayName: Order
    type: object
    properties:
      id:
        required: false
        displayName: id
        type: integer
        format: int64
      petId:
        required: false
        displayName: petId
        type: integer
        format: int64
      quantity:
        required: false
        displayName: quantity
        type: integer
        format: int32
      shipDate:
        required: false
        displayName: shipDate
        type: datetime
      status:
        required: false
        displayName: status
        description: Order Status
        type: string
        enum:
        - placed
        - approved
        - delivered
      complete:
        required: false
        default: false
        displayName: complete
        type: boolean
  Category:
    displayName: Category
    type: object
    properties:
      id:
        required: false
        displayName: id
        type: integer
        format: int64
      name:
        required: false
        displayName: name
        type: string
  User:
    displayName: User
    type: object
    properties:
      id:
        required: false
        displayName: id
        type: integer
        format: int64
      username:
        required: false
        displayName: username
        type: string
      firstName:
        required: false
        displayName: firstName
        type: string
      lastName:
        required: false
        displayName: lastName
        type: string
      email:
        required: false
        displayName: email
        type: string
      password:
        required: false
        displayName: password
        type: string
      phone:
        required: false
        displayName: phone
        type: string
      userStatus:
        required: false
        displayName: userStatus
        description: User Status
        type: integer
        format: int32
  Tag:
    displayName: Tag
    type: object
    properties:
      id:
        required: false
        displayName: id
        type: integer
        format: int64
      name:
        required: false
        displayName: name
        type: string
  Pet:
    displayName: Pet
    type: object
    properties:
      id:
        required: false
        displayName: id
        type: integer
        format: int64
      category:
        required: false
        displayName: category
        type: Category
      name:
        required: true
        displayName: name
        type: string
      photoUrls:
        required: true
        displayName: photoUrls
        type: array
        items:
          type: string
      tags:
        required: false
        displayName: tags
        type: array
        items:
          type: Tag
      status:
        required: false
        displayName: status
        description: pet status in the store
        type: string
        enum:
        - available
        - pending
        - sold
  ApiResponse:
    displayName: ApiResponse
    type: object
    properties:
      code:
        required: false
        displayName: code
        type: integer
        format: int32
      type:
        required: false
        displayName: type
        type: string
      message:
        required: false
        displayName: message
        type: string
/pet:
  post:
    displayName: addPet
    description: Add a new pet to the store
    body:
      application/json:
        displayName: body
        description: Pet object that needs to be added to the store
        type: Pet
    securedBy:
    - auth
    responses:
      200:
        description: Success
      405:
        description: Invalid input
        body: {}
  put:
    displayName: updatePet
    description: Update an existing pet
    body:
      application/json:
        displayName: body
        description: Pet object that needs to be added to the store
        type: Pet
    securedBy:
    - auth
    responses:
      200:
        description: Success
      400:
        description: Invalid ID supplied
        body: {}
      404:
        description: Pet not found
        body: {}
      405:
        description: Validation exception
        body: {}
  /findByStatus:
    get:
      displayName: findPetsByStatus
      description: Multiple status values can be provided with comma separated strings
      securedBy:
      - auth
      queryParameters:
        status:
          required: true
          displayName: status
          description: Status values that need to be considered for filter
          type: array
          items:
            type: string
            enum:
            - available
            - pending
            - sold
      responses:
        200:
          description: successful operation
          headers:
            Content-Type:
              default: application/xml
              displayName: Content-Type
              type: string
          body:
            application/json:
              displayName: response
              description: successful operation
              type: array
              items:
                type: Pet
        400:
          description: Invalid status value
          body: {}
  /findByTags:
    get:
      displayName: findPetsByTags
      description: Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.
      securedBy:
      - auth
      queryParameters:
        tags:
          required: true
          displayName: tags
          description: Tags to filter by
          type: array
          items:
            type: string
      responses:
        200:
          description: successful operation
          headers:
            Content-Type:
              default: application/xml
              displayName: Content-Type
              type: string
          body:
            application/json:
              displayName: response
              description: successful operation
              type: array
              items:
                type: Pet
        400:
          description: Invalid tag value
          body: {}
  /{petId}:
    uriParameters:
      petId:
        required: true
        displayName: petId
        description: ID of pet to return
        type: integer
        format: int64
    get:
      displayName: getPetById
      description: Returns a single pet
      securedBy:
      - auth
      responses:
        200:
          description: successful operation
          headers:
            Content-Type:
              default: application/xml
              displayName: Content-Type
              type: string
          body:
            application/json:
              displayName: response
              description: successful operation
              type: Pet
        400:
          description: Invalid ID supplied
          body: {}
        404:
          description: Pet not found
          body: {}
    post:
      displayName: updatePetWithForm
      description: Updates a pet in the store with form data
      body:
        multipart/form-data:
          type: object
          properties:
            name:
              required: false
              displayName: name
              description: Updated name of the pet
              type: string
            status:
              required: false
              displayName: status
              description: Updated status of the pet
              type: string
      securedBy:
      - auth
      responses:
        200:
          description: Success
        405:
          description: Invalid input
          body: {}
    delete:
      displayName: deletePet
      description: Deletes a pet
      securedBy:
      - auth
      headers:
        api_key:
          required: false
          displayName: api_key
          type: string
      responses:
        200:
          description: Success
        400:
          description: Invalid ID supplied
          body: {}
        404:
          description: Pet not found
          body: {}
    /uploadImage:
      post:
        displayName: uploadFile
        description: uploads an image
        body:
          multipart/form-data:
            type: object
            properties:
              additionalMetadata:
                required: false
                displayName: additionalMetadata
                description: Additional data to pass to server
                type: string
              file:
                required: false
                displayName: file
                description: file to upload
                type: file
        securedBy:
        - auth
        responses:
          200:
            description: successful operation
            headers:
              Content-Type:
                default: application/json
                displayName: Content-Type
                type: string
            body:
              application/json:
                displayName: response
                description: successful operation
                type: ApiResponse
/user:
  post:
    displayName: createUser
    description: This can only be done by the logged in user.
    body:
      application/json:
        displayName: body
        description: Created user object
        type: User
    securedBy:
    - auth
    responses:
      200:
        description: Success
  /createWithArray:
    post:
      displayName: createUsersWithArrayInput
      description: Creates list of users with given input array
      body:
        application/json:
          displayName: body
          description: List of user object
          type: array
          items:
            type: User
      securedBy:
      - auth
      responses:
        200:
          description: Success
  /createWithList:
    post:
      displayName: createUsersWithListInput
      description: Creates list of users with given input array
      body:
        application/json:
          displayName: body
          description: List of user object
          type: array
          items:
            type: User
      securedBy:
      - auth
      responses:
        200:
          description: Success
  /login:
    get:
      displayName: loginUser
      description: Logs user into the system
      securedBy:
      - auth
      queryParameters:
        username:
          required: true
          displayName: username
          description: The user name for login
          type: string
        password:
          required: true
          displayName: password
          description: The password for login in clear text
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              displayName: X-Rate-Limit
              description: calls per hour allowed by the user
              type: string
            X-Expires-After:
              displayName: X-Expires-After
              description: date in UTC when token expires
              type: string
            Content-Type:
              default: application/xml
              displayName: Content-Type
              type: string
          body:
            text/plain:
              displayName: response
              description: successful operation
              type: string
        400:
          description: Invalid username/password supplied
          body: {}
  /logout:
    get:
      displayName: logoutUser
      description: Logs out current logged in user session
      securedBy:
      - auth
      responses:
        200:
          description: Success
  /{username}:
    uriParameters:
      username:
        required: true
        displayName: username
        description: The name that needs to be fetched. Use user1 for testing.
        type: string
    get:
      displayName: getUserByName
      description: Get user by user name
      securedBy:
      - auth
      responses:
        200:
          description: successful operation
          headers:
            Content-Type:
              default: application/xml
              displayName: Content-Type
              type: string
          body:
            application/json:
              displayName: response
              description: successful operation
              type: User
        400:
          description: Invalid username supplied
          body: {}
        404:
          description: User not found
          body: {}
    put:
      displayName: updateUser
      description: This can only be done by the logged in user.
      body:
        application/json:
          displayName: body
          description: Updated user object
          type: User
      securedBy:
      - auth
      responses:
        200:
          description: Success
        400:
          description: Invalid user supplied
          body: {}
        404:
          description: User not found
          body: {}
    delete:
      displayName: deleteUser
      description: This can only be done by the logged in user.
      securedBy:
      - auth
      responses:
        200:
          description: Success
        400:
          description: Invalid username supplied
          body: {}
        404:
          description: User not found
          body: {}
/store:
  /inventory:
    get:
      displayName: getInventory
      description: Returns a map of status codes to quantities
      securedBy:
      - auth
      responses:
        200:
          description: successful operation
          headers:
            Content-Type:
              default: application/json
              displayName: Content-Type
              type: string
          body:
            application/json:
              displayName: response
              description: successful operation
              type: object
              additionalProperties: true
              properties: {}
  /order:
    post:
      displayName: placeOrder
      description: Place an order for a pet
      body:
        application/json:
          displayName: body
          description: order placed for purchasing the pet
          type: Order
      securedBy:
      - auth
      responses:
        200:
          description: successful operation
          headers:
            Content-Type:
              default: application/xml
              displayName: Content-Type
              type: string
          body:
            application/json:
              displayName: response
              description: successful operation
              type: Order
        400:
          description: Invalid Order
          body: {}
    /{orderId}:
      uriParameters:
        orderId:
          required: true
          displayName: orderId
          description: ID of pet that needs to be fetched
          type: integer
          minimum: 1
          maximum: 10
          format: int64
      get:
        displayName: getOrderById
        description: For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions
        securedBy:
        - auth
        responses:
          200:
            description: successful operation
            headers:
              Content-Type:
                default: application/xml
                displayName: Content-Type
                type: string
            body:
              application/json:
                displayName: response
                description: successful operation
                type: Order
          400:
            description: Invalid ID supplied
            body: {}
          404:
            description: Order not found
            body: {}
      delete:
        displayName: deleteOrder
        description: For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors
        securedBy:
        - auth
        responses:
          200:
            description: Success
          400:
            description: Invalid ID supplied
            body: {}
          404:
            description: Order not found
            body: {}
