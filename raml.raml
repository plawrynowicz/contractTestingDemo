#%RAML 0.8
title: Swagger Petstore
version: 1.0.0
documentation:
- title: Swagger Petstore
  content: 'This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.'
baseUri: https://petstore.swagger.io/v2
securitySchemes:
- auth:
    type: OAuth 2.0
    settings:
      authorizationUri: http://petstore.swagger.io/oauth/dialog
      accessTokenUri: ''
      authorizationGrants:
      - token
      scopes:
      - write:pets
      - read:pets
protocols:
- HTTPS
- HTTP
baseUriParameters: {}
schemas:
- Pet: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "Pet",
      "title": "Pet",
      "type": "object",
      "properties": {
        "name": {
          "example": "doggie",
          "type": "string"
        },
        "photoUrls": {
          "description": "",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "id": "Category",
          "title": "Category",
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "name": {
              "type": "string"
            }
          }
        },
        "tags": {
          "description": "",
          "type": "array",
          "items": {
            "id": "Tag",
            "title": "Tag",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "type": "string"
              }
            }
          }
        },
        "status": {
          "title": "Status1",
          "description": "pet status in the store",
          "example": "available",
          "x-enum-elements": [
            {
              "name": "available",
              "description": ""
            },
            {
              "name": "pending",
              "description": ""
            },
            {
              "name": "sold",
              "description": ""
            }
          ],
          "type": "string",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        }
      },
      "required": [
        "name",
        "photoUrls"
      ]
    }
- Pet-array: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "type": "array",
      "items": {
        "id": "Pet",
        "title": "Pet",
        "type": "object",
        "properties": {
          "name": {
            "example": "doggie",
            "type": "string"
          },
          "photoUrls": {
            "description": "",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "id": "Category",
            "title": "Category",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "tags": {
            "description": "",
            "type": "array",
            "items": {
              "id": "Tag",
              "title": "Tag",
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "status": {
            "title": "Status1",
            "description": "pet status in the store",
            "example": "available",
            "x-enum-elements": [
              {
                "name": "available",
                "description": ""
              },
              {
                "name": "pending",
                "description": ""
              },
              {
                "name": "sold",
                "description": ""
              }
            ],
            "type": "string",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        },
        "required": [
          "name",
          "photoUrls"
        ]
      }
    }
- ApiResponse: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "ApiResponse",
      "title": "ApiResponse",
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
- Order: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "Order",
      "title": "Order",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "petId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "shipDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "title": "Status",
          "description": "Order Status",
          "example": "placed",
          "x-enum-elements": [
            {
              "name": "placed",
              "description": ""
            },
            {
              "name": "approved",
              "description": ""
            },
            {
              "name": "delivered",
              "description": ""
            }
          ],
          "type": "string",
          "enum": [
            "placed",
            "approved",
            "delivered"
          ]
        },
        "complete": {
          "example": false,
          "type": "boolean"
        }
      }
    }
- User: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "User",
      "title": "User",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "description": "User Status",
          "type": "integer",
          "format": "int32"
        }
      }
    }
- User-array: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "type": "array",
      "items": {
        "id": "User",
        "title": "User",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "description": "User Status",
            "type": "integer",
            "format": "int32"
          }
        }
      }
    }
- Category: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "Category",
      "title": "Category",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    }
- Tag: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "Tag",
      "title": "Tag",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    }
- Status: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Status",
      "description": "Order Status",
      "example": "placed",
      "x-enum-elements": [
        {
          "name": "placed",
          "description": ""
        },
        {
          "name": "approved",
          "description": ""
        },
        {
          "name": "delivered",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "placed",
        "approved",
        "delivered"
      ]
    }
- Status1: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Status1",
      "description": "pet status in the store",
      "example": "available",
      "x-enum-elements": [
        {
          "name": "available",
          "description": ""
        },
        {
          "name": "pending",
          "description": ""
        },
        {
          "name": "sold",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "available",
        "pending",
        "sold"
      ]
    }
- status2: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "status2",
      "example": "available",
      "x-enum-elements": [
        {
          "name": "available",
          "description": ""
        },
        {
          "name": "pending",
          "description": ""
        },
        {
          "name": "sold",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "available",
        "pending",
        "sold"
      ]
    }
/pet:
  /findByStatus:
    get:
      securedBy:
      - auth
      description: Multiple status values can be provided with comma separated strings
      responses:
        200:
          description: successful operation
          body:
            application/xml:
              schema: Pet-array
          headers: {}
        400:
          description: Invalid status value
      queryParameters:
        status:
          description: Status values that need to be considered for filter
          required: true
          displayName: status
          enum:
          - available
          - pending
          - sold
  /findByTags:
    get:
      securedBy:
      - auth
      description: Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.
      responses:
        200:
          description: successful operation
          body:
            application/xml:
              schema: Pet-array
          headers: {}
        400:
          description: Invalid tag value
      queryParameters:
        tags:
          description: Tags to filter by
          type: string
          required: true
          displayName: tags
  /{petId}:
    uriParameters:
      petId:
        description: ID of pet to return
        type: integer
        required: true
        displayName: petId
    /uploadImage:
      uriParameters: {}
      post:
        securedBy:
        - auth
        body:
          multipart/form-data:
            formParameters:
              additionalMetadata:
                description: Additional data to pass to server
                type: string
                required: false
                displayName: additionalMetadata
              file:
                description: file to upload
                type: file
                required: false
                displayName: file
        description: uploads an image
        responses:
          200:
            description: successful operation
            body:
              application/json:
                schema: ApiResponse
            headers: {}
    get:
      securedBy:
      - auth
      description: Returns a single pet
      responses:
        200:
          description: successful operation
          body:
            application/xml:
              schema: Pet
          headers: {}
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
    post:
      securedBy:
      - auth
      body:
        application/x-www-form-urlencoded:
          formParameters:
            name:
              description: Updated name of the pet
              type: string
              required: false
              displayName: name
            status:
              description: Updated status of the pet
              type: string
              required: false
              displayName: status
      description: Updates a pet in the store with form data
      responses:
        200:
          description: Success
        405:
          description: Invalid input
    delete:
      securedBy:
      - auth
      description: Deletes a pet
      responses:
        200:
          description: Success
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      headers:
        api_key:
          type: string
          required: false
          displayName: api_key
  post:
    securedBy:
    - auth
    body:
      application/json:
        schema: Pet
    description: Add a new pet to the store
    responses:
      200:
        description: Success
      405:
        description: Invalid input
  put:
    securedBy:
    - auth
    body:
      application/json:
        schema: Pet
    description: Update an existing pet
    responses:
      200:
        description: Success
      400:
        description: Invalid ID supplied
      404:
        description: Pet not found
      405:
        description: Validation exception
/user:
  /createWithArray:
    post:
      securedBy:
      - auth
      body:
        application/json:
          schema: User-array
      description: Creates list of users with given input array
      responses:
        200:
          description: Success
  /createWithList:
    post:
      securedBy:
      - auth
      body:
        application/json:
          schema: User-array
      description: Creates list of users with given input array
      responses:
        200:
          description: Success
  /login:
    get:
      securedBy:
      - auth
      description: Logs user into the system
      responses:
        200:
          description: successful operation
          body:
            application/xml:
              schema: |
                {

                  "description": "successful operation",

                  "type": "string"

                }
          headers:
            X-Rate-Limit:
              required: false
            X-Expires-After:
              required: false
        400:
          description: Invalid username/password supplied
      queryParameters:
        username:
          description: The user name for login
          type: string
          required: true
          displayName: username
        password:
          description: The password for login in clear text
          type: string
          required: true
          displayName: password
  /logout:
    get:
      securedBy:
      - auth
      description: Logs out current logged in user session
      responses:
        200:
          description: Success
  /{username}:
    uriParameters:
      username:
        description: The name that needs to be fetched. Use user1 for testing.
        type: string
        required: true
        displayName: username
    get:
      securedBy:
      - auth
      description: Get user by user name
      responses:
        200:
          description: successful operation
          body:
            application/xml:
              schema: User
          headers: {}
        400:
          description: Invalid username supplied
        404:
          description: User not found
    put:
      securedBy:
      - auth
      body:
        application/json:
          schema: User
      description: This can only be done by the logged in user.
      responses:
        200:
          description: Success
        400:
          description: Invalid user supplied
        404:
          description: User not found
    delete:
      securedBy:
      - auth
      description: This can only be done by the logged in user.
      responses:
        200:
          description: Success
        400:
          description: Invalid username supplied
        404:
          description: User not found
  post:
    securedBy:
    - auth
    body:
      application/json:
        schema: User
    description: This can only be done by the logged in user.
    responses:
      200:
        description: Success
/store:
  /inventory:
    get:
      securedBy:
      - auth
      description: Returns a map of status codes to quantities
      responses:
        200:
          description: successful operation
          body:
            application/json:
              schema: |
                {

                  "type": "object",

                  "additionalProperties": {

                    "type": "integer",

                    "format": "int32"

                  }

                }
          headers: {}
  /order:
    /{orderId}:
      uriParameters:
        orderId:
          description: ID of pet that needs to be fetched
          type: integer
          required: true
          displayName: orderId
          minimum: 1
          maximum: 10
      get:
        securedBy:
        - auth
        description: For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions
        responses:
          200:
            description: successful operation
            body:
              application/xml:
                schema: Order
            headers: {}
          400:
            description: Invalid ID supplied
          404:
            description: Order not found
      delete:
        securedBy:
        - auth
        description: For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors
        responses:
          200:
            description: Success
          400:
            description: Invalid ID supplied
          404:
            description: Order not found
    post:
      securedBy:
      - auth
      body:
        application/json:
          schema: Order
      description: Place an order for a pet
      responses:
        200:
          description: successful operation
          body:
            application/xml:
              schema: Order
          headers: {}
        400:
          description: Invalid Order
